{"ast":null,"code":"var _jsxFileName = \"/Users/clairemuller/Dev/ReactMineSweeper/src/containers/GameBoard.js\";\nimport React from 'react';\nimport Square from '../components/Square';\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: Array(6).fill().map(() => new Array(6).fill('')),\n      mines: 10\n    };\n  }\n\n  componentDidMount() {\n    this.randomMines();\n    this.setNeighborCount();\n  }\n\n  randomMines() {\n    let mines = 0;\n    let copyGrid = [...this.state.grid];\n\n    while (mines < this.state.mines) {\n      let x = Math.floor(Math.random() * this.state.grid.length);\n      let y = Math.floor(Math.random() * this.state.grid.length);\n\n      if (copyGrid[x][y] === 0) {\n        copyGrid[x][y] = 'b';\n        mines++;\n      }\n    }\n\n    this.setState({\n      grid: copyGrid\n    });\n  }\n\n  generatePossibilities(x, y) {\n    return [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y + 1], [x, y - 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]];\n  }\n\n  neighborMines(x, y, copyGrid) {\n    let bombCount = 0;\n    let poss = this.generatePossibilities(x, y);\n\n    for (var i = 0; i < poss.length; i++) {\n      let xx = poss[i][0];\n      let yy = poss[i][1];\n\n      if (xx >= 0 && yy >= 0 && xx < copyGrid.length && yy < copyGrid.length) {\n        let coor = copyGrid[xx][yy];\n\n        if (coor === 'b') {\n          bombCount++;\n        }\n      }\n    }\n\n    return bombCount;\n  }\n\n  setNeighborCount() {\n    let copyGrid = [...this.state.grid];\n    let updateGrid = [...this.state.grid];\n\n    for (var i = 0; i < copyGrid.length; i++) {\n      for (var j = 0; j < copyGrid.length; j++) {\n        if (copyGrid[i][j] !== 'b') {\n          updateGrid[i][j] = this.neighborMines(i, j, copyGrid);\n        }\n      }\n    }\n\n    this.setState({\n      grid: updateGrid\n    });\n  }\n\n  clearEmpty() {}\n\n  render() {\n    const style = {\n      textAlign: \"center\",\n      tableLayout: 'fixed'\n    };\n    const gameGrid = this.state.grid.map((row, i) => {\n      return React.createElement(\"tr\", {\n        key: \"row\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, row.map((col, j) => {\n        return React.createElement(Square, {\n          key: i + \":\" + j,\n          data: this.state.grid[i][j],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      }));\n    });\n    return React.createElement(\"table\", {\n      cellSpacing: \"0\",\n      id: \"table\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, gameGrid));\n  }\n\n}\n\nexport default GameBoard;","map":{"version":3,"sources":["/Users/clairemuller/Dev/ReactMineSweeper/src/containers/GameBoard.js"],"names":["React","Square","GameBoard","Component","constructor","props","state","grid","Array","fill","map","mines","componentDidMount","randomMines","setNeighborCount","copyGrid","x","Math","floor","random","length","y","setState","generatePossibilities","neighborMines","bombCount","poss","i","xx","yy","coor","updateGrid","j","clearEmpty","render","style","textAlign","tableLayout","gameGrid","row","col"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Square from '../components/Square'\n\n\nclass GameBoard extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      grid: Array(6).fill().map(() => new Array(6).fill('')),\n      mines: 10\n    }\n  }\n\n  componentDidMount() {\n    this.randomMines()\n    this.setNeighborCount()\n  }\n\n  randomMines() {\n    let mines = 0\n    let copyGrid = [...this.state.grid]\n\n    while (mines < this.state.mines) {\n      let x = Math.floor(Math.random() * this.state.grid.length)\n      let y = Math.floor(Math.random() * this.state.grid.length)\n      if (copyGrid[x][y] === 0) {\n        copyGrid[x][y] = 'b'\n        mines++\n      }\n    }\n    this.setState({ grid: copyGrid })\n  }\n\n  generatePossibilities(x, y) {\n    return [\n      [x - 1, y - 1],\n      [x - 1, y],\n      [x - 1, y + 1],\n      [x, y + 1],\n      [x, y - 1],\n      [x + 1, y - 1],\n      [x + 1, y],\n      [x + 1, y + 1]\n    ]\n\n  }\n\n  neighborMines(x, y, copyGrid) {\n    let bombCount = 0\n    let poss = this.generatePossibilities(x, y)\n    for (var i = 0; i < poss.length; i++) {\n      let xx = poss[i][0]\n      let yy = poss[i][1]\n      if (xx >= 0 && yy >= 0 && xx < copyGrid.length && yy < copyGrid.length) {\n        let coor = (copyGrid[xx][yy])\n        if (coor === 'b') {\n          bombCount++\n        }\n      }\n    }\n    return bombCount\n  }\n\n  setNeighborCount() {\n    let copyGrid = [...this.state.grid]\n    let updateGrid = [...this.state.grid]\n    for (var i = 0; i < copyGrid.length; i++) {\n      for (var j = 0; j < copyGrid.length; j++) {\n        if (copyGrid[i][j] !== 'b') {\n          updateGrid[i][j] = this.neighborMines(i, j, copyGrid)\n        }\n      }\n    }\n    this.setState({ grid: updateGrid })\n  }\n\n  clearEmpty() {\n\n\n  }\n\n\n  render() {\n    const style = {\n      textAlign: \"center\",\n      tableLayout: 'fixed',\n    }\n\n    const gameGrid = this.state.grid.map((row, i) => {\n      return (\n        <tr key={\"row\" + i}>\n          {row.map((col, j) => {\n            return (\n              <Square\n                key={i + \":\" + j}\n                data={this.state.grid[i][j]} />\n            )\n          })}\n        </tr>\n      )\n    })\n\n    return (\n      <table cellSpacing=\"0\" id=\"table\" style={style}>\n        <tbody>\n          {gameGrid}\n        </tbody>\n      </table>\n\n    )\n  }\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}