{"ast":null,"code":"var _jsxFileName = \"/Users/clairemuller/Dev/ReactMineSweeper/src/components/Timer.js\";\nimport React from 'react';\n\nclass Timer extends React.Component {\n  constructor() {\n    super();\n\n    this.startTimer = () => {\n      let time = 0;\n      let interval = setInterval(() => {\n        this.setState({\n          time\n        });\n        time++;\n      }, 1000);\n    };\n\n    this.handleClick = () => {\n      this.setState(state => {\n        if (state.status) {\n          clearInterval(this.timer);\n        } else {\n          const startTime = Date.now() - this.state.runningTime;\n          this.timer = setInterval(() => {\n            this.setState({\n              runningTime: Date.now() - startTime\n            });\n          });\n        }\n\n        return {\n          status: !state.status\n        };\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        runningTime: 0,\n        status: false\n      });\n    };\n\n    this.state = {\n      time: 0\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.active !== this.props.active) {\n      this.startTimer();\n    } else {}\n  } //     let intervalId = setInterval(timer, 10000);\n  // clearInterval(intervalId);\n\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, \"Time: \", this.state.time);\n  }\n\n}\n\nexport default Timer;","map":{"version":3,"sources":["/Users/clairemuller/Dev/ReactMineSweeper/src/components/Timer.js"],"names":["React","Timer","Component","constructor","startTimer","time","interval","setInterval","setState","handleClick","state","status","clearInterval","timer","startTime","Date","now","runningTime","handleReset","componentDidUpdate","prevProps","active","props","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,KAAN,SAAoBD,KAAK,CAACE,SAA1B,CAAoC;AAChCC,EAAAA,WAAW,GAAG;AACV;;AADU,SAoBdC,UApBc,GAoBD,MAAM;AACf,UAAIC,IAAI,GAAG,CAAX;AACA,UAAIC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC7B,aAAKC,QAAL,CAAc;AACVH,UAAAA;AADU,SAAd;AAGAA,QAAAA,IAAI;AACP,OALyB,EAKvB,IALuB,CAA1B;AAOH,KA7Ba;;AAAA,SAmCdI,WAnCc,GAmCA,MAAM;AAChB,WAAKD,QAAL,CAAcE,KAAK,IAAI;AACnB,YAAIA,KAAK,CAACC,MAAV,EAAkB;AACdC,UAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACH,SAFD,MAEO;AACH,gBAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,KAAa,KAAKN,KAAL,CAAWO,WAA1C;AACA,eAAKJ,KAAL,GAAaN,WAAW,CAAC,MAAM;AAC3B,iBAAKC,QAAL,CAAc;AAAES,cAAAA,WAAW,EAAEF,IAAI,CAACC,GAAL,KAAaF;AAA5B,aAAd;AACH,WAFuB,CAAxB;AAGH;;AACD,eAAO;AAAEH,UAAAA,MAAM,EAAE,CAACD,KAAK,CAACC;AAAjB,SAAP;AACH,OAVD;AAWH,KA/Ca;;AAAA,SAgDdO,WAhDc,GAgDA,MAAM;AAChB,WAAKV,QAAL,CAAc;AAAES,QAAAA,WAAW,EAAE,CAAf;AAAkBN,QAAAA,MAAM,EAAE;AAA1B,OAAd;AACH,KAlDa;;AAEV,SAAKD,KAAL,GAAa;AACTL,MAAAA,IAAI,EAAE;AADG,KAAb;AAGH;;AAEDc,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAE1B,QAAIA,SAAS,CAACC,MAAV,KAAqB,KAAKC,KAAL,CAAWD,MAApC,EAA4C;AACxC,WAAKjB,UAAL;AAEH,KAHD,MAGO,CAEN;AACJ,GAhB+B,CAkBhC;AACA;;;AAaAmB,EAAAA,MAAM,GAAG;AACL,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAY,KAAKb,KAAL,CAAWL,IAAvB,CAAP;AACH;;AAlC+B;;AAwDpC,eAAeJ,KAAf","sourcesContent":["import React from 'react'\n\nclass Timer extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            time: 0,\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n\n        if (prevProps.active !== this.props.active) {\n            this.startTimer()\n\n        } else {\n\n        }\n    }\n\n    //     let intervalId = setInterval(timer, 10000);\n    // clearInterval(intervalId);\n\n    startTimer = () => {\n        let time = 0\n        let interval = setInterval(() => {\n            this.setState({\n                time\n            })\n            time++;\n        }, 1000)\n\n    }\n\n    render() {\n        return <div>Time: {this.state.time}</div>\n    }\n\n    handleClick = () => {\n        this.setState(state => {\n            if (state.status) {\n                clearInterval(this.timer);\n            } else {\n                const startTime = Date.now() - this.state.runningTime;\n                this.timer = setInterval(() => {\n                    this.setState({ runningTime: Date.now() - startTime });\n                });\n            }\n            return { status: !state.status };\n        });\n    };\n    handleReset = () => {\n        this.setState({ runningTime: 0, status: false });\n    };\n\n\n\n}\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}