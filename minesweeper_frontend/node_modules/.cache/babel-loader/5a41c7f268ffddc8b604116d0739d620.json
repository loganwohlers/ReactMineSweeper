{"ast":null,"code":"var _jsxFileName = \"/Users/clairemuller/Dev/ReactMineSweeper/src/containers/GameBoard.js\";\nimport React from 'react';\nimport Square from '../components/Square';\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSquareClick = (e, coords) => {\n      let copyGrid = [...this.state.grid];\n      let visited = {};\n      visited[coords] = true;\n      let queue = [coords];\n\n      while (queue.length > 0) {\n        let current = queue.pop();\n\n        if (copyGrid[current[0]][current[1]] === 0) {\n          copyGrid[current[0]][current[1]] = 'X';\n        } //check all these and if it's not 0 OR mine set it to clicked\n\n\n        let zeroCheck = this.generatePossibilities(current[0], current[1]); // && copyGrid[n[0]][n[1]]\n\n        let bordering = zeroCheck.filter(n => copyGrid[n[0]][n[1]] !== 0); // for (let i = 0; i < neighbors.length; i++) {\n        // }\n\n        bordering.forEach(ss => {\n          let currValue = copyGrid[ss[0]][ss[1]];\n          copyGrid[ss[0]][ss[1]] = currValue + \"**\";\n        }); //fitler for 0's\n\n        let neighbors = zeroCheck.filter(n => copyGrid[n[0]][n[1]] === 0);\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (!visited[neighbors[i]]) {\n            queue.push(neighbors[i]);\n            visited[neighbors[i]] = true;\n          } //visit current\n\n        }\n      }\n\n      console.log(\"out of queue\");\n      this.setState({\n        grid: copyGrid\n      });\n    };\n\n    this.state = {\n      grid: Array(6).fill().map(() => new Array(6).fill(0)),\n      mines: 10\n    };\n  }\n\n  componentDidMount() {\n    this.randomMines();\n    this.setNeighborCount();\n  }\n\n  randomMines() {\n    let mines = 0;\n    let copyGrid = [...this.state.grid];\n\n    while (mines < this.state.mines) {\n      let x = Math.floor(Math.random() * this.state.grid.length);\n      let y = Math.floor(Math.random() * this.state.grid.length);\n\n      if (copyGrid[x][y] === 0) {\n        copyGrid[x][y] = 'b';\n        mines++;\n      }\n    }\n\n    this.setState({\n      grid: copyGrid\n    });\n  }\n\n  generatePossibilities(x, y) {\n    let all = [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y + 1], [x, y - 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]];\n    return all.filter((coords, i) => {\n      let xx = all[i][0];\n      let yy = all[i][1];\n      return xx >= 0 && yy >= 0 && xx < this.state.grid.length && yy < this.state.grid.length;\n    });\n  }\n\n  neighborMines(x, y, copyGrid) {\n    let bombCount = 0;\n    let poss = this.generatePossibilities(x, y);\n\n    for (var i = 0; i < poss.length; i++) {\n      let xx = poss[i][0];\n      let yy = poss[i][1];\n      let coords = copyGrid[xx][yy];\n\n      if (coords === 'b') {\n        bombCount++;\n      }\n    }\n\n    return bombCount;\n  }\n\n  setNeighborCount() {\n    let copyGrid = [...this.state.grid];\n    let updateGrid = [...this.state.grid];\n\n    for (var i = 0; i < copyGrid.length; i++) {\n      for (var j = 0; j < copyGrid.length; j++) {\n        if (copyGrid[i][j] !== 'b') {\n          updateGrid[i][j] = this.neighborMines(i, j, copyGrid);\n        }\n      }\n    }\n\n    this.setState({\n      grid: updateGrid\n    });\n  } //breadth first search\n\n\n  render() {\n    const style = {\n      textAlign: \"center\",\n      tableLayout: 'fixed'\n    };\n    const gameGrid = this.state.grid.map((row, i) => {\n      return React.createElement(\"tr\", {\n        key: \"row\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, row.map((col, j) => {\n        return React.createElement(Square, {\n          key: i + \":\" + j,\n          data: this.state.grid[i][j],\n          coords: [i, j],\n          handleSquareClick: this.handleSquareClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        });\n      }));\n    });\n    return React.createElement(\"table\", {\n      cellSpacing: \"0\",\n      id: \"table\",\n      style: style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, gameGrid));\n  }\n\n}\n\nexport default GameBoard;","map":{"version":3,"sources":["/Users/clairemuller/Dev/ReactMineSweeper/src/containers/GameBoard.js"],"names":["React","Square","GameBoard","Component","constructor","props","handleSquareClick","e","coords","copyGrid","state","grid","visited","queue","length","current","pop","zeroCheck","generatePossibilities","bordering","filter","n","forEach","ss","currValue","neighbors","i","push","console","log","setState","Array","fill","map","mines","componentDidMount","randomMines","setNeighborCount","x","Math","floor","random","y","all","xx","yy","neighborMines","bombCount","poss","updateGrid","j","render","style","textAlign","tableLayout","gameGrid","row","col"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Square from '../components/Square'\n\n\nclass GameBoard extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      grid: Array(6).fill().map(() => new Array(6).fill(0)),\n      mines: 10\n    }\n  }\n\n  componentDidMount() {\n    this.randomMines()\n    this.setNeighborCount()\n  }\n\n  randomMines() {\n    let mines = 0\n    let copyGrid = [...this.state.grid]\n\n    while (mines < this.state.mines) {\n      let x = Math.floor(Math.random() * this.state.grid.length)\n      let y = Math.floor(Math.random() * this.state.grid.length)\n      if (copyGrid[x][y] === 0) {\n        copyGrid[x][y] = 'b'\n        mines++\n      }\n    }\n    this.setState({ grid: copyGrid })\n  }\n\n  generatePossibilities(x, y) {\n    let all = [\n      [x - 1, y - 1],\n      [x - 1, y],\n      [x - 1, y + 1],\n      [x, y + 1],\n      [x, y - 1],\n      [x + 1, y - 1],\n      [x + 1, y],\n      [x + 1, y + 1]\n    ]\n    return all.filter((coords, i) => {\n      let xx = all[i][0]\n      let yy = all[i][1]\n      return (xx >= 0 && yy >= 0 && xx < this.state.grid.length && yy < this.state.grid.length)\n    })\n  }\n\n  neighborMines(x, y, copyGrid) {\n    let bombCount = 0\n    let poss = this.generatePossibilities(x, y)\n    for (var i = 0; i < poss.length; i++) {\n      let xx = poss[i][0]\n      let yy = poss[i][1]\n      let coords = (copyGrid[xx][yy])\n      if (coords === 'b') {\n        bombCount++\n      }\n    }\n    return bombCount\n  }\n\n  setNeighborCount() {\n    let copyGrid = [...this.state.grid]\n    let updateGrid = [...this.state.grid]\n    for (var i = 0; i < copyGrid.length; i++) {\n      for (var j = 0; j < copyGrid.length; j++) {\n        if (copyGrid[i][j] !== 'b') {\n          updateGrid[i][j] = this.neighborMines(i, j, copyGrid)\n        }\n      }\n    }\n    this.setState({ grid: updateGrid })\n  }\n  //breadth first search\n  handleSquareClick = (e, coords) => {\n    let copyGrid = [...this.state.grid]\n    let visited = {}\n    visited[coords] = true\n    let queue = [coords]\n    while (queue.length > 0) {\n      let current = queue.pop()\n      if (copyGrid[current[0]][current[1]] === 0) {\n        copyGrid[current[0]][current[1]] = 'X'\n      }\n\n      //check all these and if it's not 0 OR mine set it to clicked\n      let zeroCheck = this.generatePossibilities(current[0], current[1])\n      // && copyGrid[n[0]][n[1]]\n      let bordering = zeroCheck.filter(n => copyGrid[n[0]][n[1]] !== 0)\n      // for (let i = 0; i < neighbors.length; i++) {\n      // }\n\n\n      bordering.forEach(ss => {\n        let currValue = copyGrid[ss[0]][ss[1]]\n        copyGrid[ss[0]][ss[1]] = currValue + \"**\"\n      })\n\n      //fitler for 0's\n      let neighbors = zeroCheck.filter(n => copyGrid[n[0]][n[1]] === 0)\n      for (let i = 0; i < neighbors.length; i++) {\n        if (!visited[neighbors[i]]) {\n          queue.push(neighbors[i])\n          visited[neighbors[i]] = true\n        }\n        //visit current\n      }\n    }\n    console.log(\"out of queue\")\n    this.setState({ grid: copyGrid })\n  }\n\n\n  render() {\n    const style = {\n      textAlign: \"center\",\n      tableLayout: 'fixed',\n    }\n\n    const gameGrid = this.state.grid.map((row, i) => {\n      return (\n        <tr key={\"row\" + i}>\n          {row.map((col, j) => {\n            return (\n              <Square\n                key={i + \":\" + j}\n                data={this.state.grid[i][j]}\n                coords={[i, j]}\n                handleSquareClick={this.handleSquareClick} />\n            )\n          })}\n        </tr>\n      )\n    })\n\n    return (\n      <table cellSpacing=\"0\" id=\"table\" style={style}>\n        <tbody>\n          {gameGrid}\n        </tbody>\n      </table>\n\n    )\n  }\n}\n\nexport default GameBoard;\n\n\n"]},"metadata":{},"sourceType":"module"}