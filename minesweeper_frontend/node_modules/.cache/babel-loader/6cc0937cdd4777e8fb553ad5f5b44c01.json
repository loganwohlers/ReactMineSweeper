{"ast":null,"code":"var _jsxFileName = \"/Users/clairemuller/Dev/ReactMineSweeper/src/containers/GameBoard.js\";\nimport React from 'react';\nimport Square from '../components/Square';\nimport GameInfoBar from '../components/GameInfoBar';\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.determineBoard = difficulty => {\n      let newGrid, mines;\n\n      if (difficulty === \"intermediate\") {\n        newGrid = Array(16).fill().map(() => new Array(16).fill(0));\n        mines = 40;\n      } else if (difficulty === \"difficult\") {\n        newGrid = Array(22).fill().map(() => new Array(22).fill(0));\n        mines = 99;\n      } else {\n        // newGrid = Array(9).fill().map(() => new Array(9).fill(0))\n        // mines = 10\n        newGrid = Array(3).fill().map(() => new Array(3).fill(0));\n        mines = 2;\n      }\n\n      this.setState({\n        grid: newGrid,\n        mines\n      }, () => {\n        this.randomMines();\n      });\n    };\n\n    this.handleSquareClick = (e, coords) => {\n      if (this.state.active) {\n        let currentValue = this.state.grid[coords[0]][coords[1]];\n\n        if (currentValue === 'b') {\n          this.setState({\n            active: false\n          });\n        } else if (currentValue === 0) {\n          this.handleZeroSquareClick(coords);\n        } else {\n          let copyGrid = [...this.state.grid];\n          copyGrid[coords[0]][coords[1]] = currentValue + \"*\";\n          this.setState({\n            grid: copyGrid\n          });\n        }\n\n        if (this.state.mines === 0) {\n          this.winCheck();\n        }\n      }\n    };\n\n    this.handleZeroSquareClick = coords => {\n      let copyGrid = [...this.state.grid];\n      let visited = {};\n      visited[coords] = true;\n      let queue = [coords];\n\n      while (queue.length > 0) {\n        let current = queue.pop();\n\n        if (copyGrid[current[0]][current[1]] === 0) {\n          copyGrid[current[0]][current[1]] = ' *';\n        } //grab all possibile neighboring tiles\n\n\n        let poss = this.generatePossibilities(current[0], current[1]); // filter possibilities for numbe tile and reveal them\n\n        let bordering = poss.filter(n => copyGrid[n[0]][n[1]] !== 0);\n        bordering.forEach(ss => {\n          let currValue = copyGrid[ss[0]][ss[1]]; // * is revealed\n\n          copyGrid[ss[0]][ss[1]] = currValue + \"*\";\n        }); //filter for suitable 0/blank tiles and visit them on search\n\n        let neighbors = poss.filter(n => copyGrid[n[0]][n[1]] === 0);\n\n        for (let i = 0; i < neighbors.length; i++) {\n          if (!visited[neighbors[i]]) {\n            queue.push(neighbors[i]);\n            visited[neighbors[i]] = true;\n          }\n        }\n      }\n\n      this.setState({\n        grid: copyGrid\n      });\n    };\n\n    this.winCheck = () => {\n      if (this.state.mines === 0) {\n        for (let i = 0; i < this.state.grid.length; i++) {\n          for (let j = 0; j < this.state.grid.length; j++) {\n            let currValue = this.state.grid[i][j] + '';\n            console.log(currValue);\n\n            if (!(currValue.includes('*') || currValue === 'bF')) {\n              return false;\n            }\n          }\n        }\n\n        this.winGame();\n      }\n    };\n\n    this.winGame = () => {\n      this.setState({\n        active: false\n      });\n      alert(\"YOU WIN\");\n    };\n\n    this.handleFlagClick = (e, coords) => {\n      if (this.state.active) {\n        let mines = this.state.mines;\n        let copyGrid = [...this.state.grid];\n        let stringValue = copyGrid[coords[0]][coords[1]] + ''; //remove flag\n\n        if (stringValue.includes('F')) {\n          mines++;\n          copyGrid[coords[0]][coords[1]] = stringValue.slice(0, 1); //adding flag\n        } else {\n          mines--;\n          copyGrid[coords[0]][coords[1]] += 'F';\n        }\n\n        this.setState({\n          grid: copyGrid,\n          mines\n        }, () => this.winCheck());\n      }\n    };\n\n    this.gameStarted = () => {\n      this.setState({\n        active: true\n      });\n    };\n\n    this.restartGame = () => {\n      console.log(\"Game restart!!\");\n      let currDifficulty = this.state.difficulty;\n      this.setState({\n        active: true\n      }, () => {\n        this.determineBoard(currDifficulty);\n      }); //reset timer\n    };\n\n    this.state = {\n      grid: [],\n      mines: 0,\n      active: false\n    };\n  }\n\n  componentDidMount() {\n    this.determineBoard(this.props.difficulty);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.difficulty !== this.props.difficulty && this.state.active === false) {\n      this.determineBoard(this.props.difficulty);\n    }\n  }\n\n  randomMines() {\n    let mines = 0;\n    let copyGrid = [...this.state.grid];\n\n    while (mines < this.state.mines) {\n      let x = Math.floor(Math.random() * this.state.grid.length);\n      let y = Math.floor(Math.random() * this.state.grid.length);\n\n      if (copyGrid[x][y] === 0) {\n        copyGrid[x][y] = 'b';\n        mines++;\n      }\n    }\n\n    this.setState({\n      grid: copyGrid\n    }, () => this.setNeighborCount());\n  } //uses a 2d array of the 8 possible tiles around any given x,y coordinate and\n  //then filters out those which could not exist on currents state's board length\n\n\n  generatePossibilities(x, y) {\n    let all = [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y + 1], [x, y - 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]];\n    return all.filter((coords, i) => {\n      let xx = all[i][0];\n      let yy = all[i][1];\n      return xx >= 0 && yy >= 0 && xx < this.state.grid.length && yy < this.state.grid.length;\n    });\n  } //checks- through a copy of the current state grid- the value of all neighboring tiles and returns # of mines\n\n\n  neighborMines(x, y, copyGrid) {\n    let bombCount = 0;\n    let poss = this.generatePossibilities(x, y);\n\n    for (var i = 0; i < poss.length; i++) {\n      let xx = poss[i][0];\n      let yy = poss[i][1];\n      let coords = copyGrid[xx][yy];\n\n      if (coords === 'b') {\n        bombCount++;\n      }\n    }\n\n    return bombCount;\n  } //reassigns the values in the state grid to accuratly reflect the number of mines contained in neighboring tiles\n\n\n  setNeighborCount() {\n    let copyGrid = [...this.state.grid];\n    let updateGrid = [...this.state.grid];\n\n    for (var i = 0; i < copyGrid.length; i++) {\n      for (var j = 0; j < copyGrid.length; j++) {\n        if (copyGrid[i][j] !== 'b') {\n          updateGrid[i][j] = this.neighborMines(i, j, copyGrid);\n        }\n      }\n    }\n\n    this.setState({\n      grid: updateGrid\n    });\n  } //breadth first search to \"click\" all suitable 0 tiles and reveal all suitable # tiles\n\n\n  render() {\n    //styling for table- needs to be moved to css\n    const style = {\n      textAlign: \"center\",\n      tableLayout: 'fixed' //render the current board via passing in values from state grid to Square components and\n      //arranging them in a table\n\n    };\n    const gameGrid = this.state.grid.map((row, i) => {\n      return React.createElement(\"tr\", {\n        key: \"row\" + i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, row.map((col, j) => {\n        let revealed = false;\n        let flagged = false;\n        let currentValue = this.state.grid[i][j].toString();\n        currentValue.includes('*') ? revealed = true : revealed = false;\n        currentValue.includes('F') ? flagged = true : flagged = false;\n        return React.createElement(Square, {\n          key: i + \":\" + j,\n          revealed: revealed,\n          data: currentValue.charAt(0),\n          flagged: flagged,\n          active: this.state.active,\n          coords: [i, j],\n          handleSquareClick: this.handleSquareClick,\n          handleFlagClick: this.handleFlagClick,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        });\n      }));\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(GameInfoBar, {\n      mines: this.state.mines,\n      active: this.state.active,\n      restart: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }), React.createElement(\"table\", {\n      cellSpacing: \"0\",\n      id: \"table\",\n      style: style,\n      onMouseEnter: this.gameStarted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, gameGrid)));\n  }\n\n}\n\nexport default GameBoard;","map":{"version":3,"sources":["/Users/clairemuller/Dev/ReactMineSweeper/src/containers/GameBoard.js"],"names":["React","Square","GameInfoBar","GameBoard","Component","constructor","props","determineBoard","difficulty","newGrid","mines","Array","fill","map","setState","grid","randomMines","handleSquareClick","e","coords","state","active","currentValue","handleZeroSquareClick","copyGrid","winCheck","visited","queue","length","current","pop","poss","generatePossibilities","bordering","filter","n","forEach","ss","currValue","neighbors","i","push","j","console","log","includes","winGame","alert","handleFlagClick","stringValue","slice","gameStarted","restartGame","currDifficulty","componentDidMount","componentDidUpdate","prevProps","x","Math","floor","random","y","setNeighborCount","all","xx","yy","neighborMines","bombCount","updateGrid","render","style","textAlign","tableLayout","gameGrid","row","col","revealed","flagged","toString","charAt"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Square from '../components/Square'\nimport GameInfoBar from '../components/GameInfoBar'\n\nclass GameBoard extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      grid: [],\n      mines: 0,\n      active: false\n    }\n  }\n\n  componentDidMount() {\n    this.determineBoard(this.props.difficulty)\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.difficulty !== this.props.difficulty && this.state.active === false) {\n      this.determineBoard(this.props.difficulty)\n    }\n  }\n\n  determineBoard = (difficulty) => {\n    let newGrid, mines;\n    if (difficulty === \"intermediate\") {\n      newGrid = Array(16).fill().map(() => new Array(16).fill(0))\n      mines = 40\n    } else if (difficulty === \"difficult\") {\n      newGrid = Array(22).fill().map(() => new Array(22).fill(0))\n      mines = 99\n    } else {\n      // newGrid = Array(9).fill().map(() => new Array(9).fill(0))\n      // mines = 10\n      newGrid = Array(3).fill().map(() => new Array(3).fill(0))\n      mines = 2\n    }\n\n    this.setState({\n      grid: newGrid,\n      mines\n    }, () => {\n      this.randomMines()\n    })\n  }\n\n  randomMines() {\n\n    let mines = 0\n    let copyGrid = [...this.state.grid]\n\n\n    while (mines < this.state.mines) {\n      let x = Math.floor(Math.random() * this.state.grid.length)\n      let y = Math.floor(Math.random() * this.state.grid.length)\n      if (copyGrid[x][y] === 0) {\n        copyGrid[x][y] = 'b'\n        mines++\n      }\n    }\n    this.setState({ grid: copyGrid }, () => this.setNeighborCount())\n  }\n\n  //uses a 2d array of the 8 possible tiles around any given x,y coordinate and\n  //then filters out those which could not exist on currents state's board length\n  generatePossibilities(x, y) {\n    let all = [\n      [x - 1, y - 1],\n      [x - 1, y],\n      [x - 1, y + 1],\n      [x, y + 1],\n      [x, y - 1],\n      [x + 1, y - 1],\n      [x + 1, y],\n      [x + 1, y + 1]\n    ]\n    return all.filter((coords, i) => {\n      let xx = all[i][0]\n      let yy = all[i][1]\n      return (xx >= 0 && yy >= 0 && xx < this.state.grid.length && yy < this.state.grid.length)\n    })\n  }\n\n  //checks- through a copy of the current state grid- the value of all neighboring tiles and returns # of mines\n  neighborMines(x, y, copyGrid) {\n    let bombCount = 0\n    let poss = this.generatePossibilities(x, y)\n    for (var i = 0; i < poss.length; i++) {\n      let xx = poss[i][0]\n      let yy = poss[i][1]\n      let coords = (copyGrid[xx][yy])\n      if (coords === 'b') {\n        bombCount++\n      }\n    }\n    return bombCount\n  }\n\n  //reassigns the values in the state grid to accuratly reflect the number of mines contained in neighboring tiles\n  setNeighborCount() {\n    let copyGrid = [...this.state.grid]\n    let updateGrid = [...this.state.grid]\n    for (var i = 0; i < copyGrid.length; i++) {\n      for (var j = 0; j < copyGrid.length; j++) {\n        if (copyGrid[i][j] !== 'b') {\n          updateGrid[i][j] = this.neighborMines(i, j, copyGrid)\n        }\n      }\n    }\n    this.setState({ grid: updateGrid })\n  }\n\n  //breadth first search to \"click\" all suitable 0 tiles and reveal all suitable # tiles\n\n  handleSquareClick = (e, coords) => {\n    if (this.state.active) {\n      let currentValue = this.state.grid[coords[0]][coords[1]]\n      if (currentValue === 'b') {\n        this.setState({\n          active: false\n        })\n      } else if (currentValue === 0) {\n        this.handleZeroSquareClick(coords)\n      } else {\n        let copyGrid = [...this.state.grid]\n        copyGrid[coords[0]][coords[1]] = currentValue + \"*\"\n        this.setState({ grid: copyGrid })\n      }\n      if (this.state.mines === 0) {\n        this.winCheck()\n      }\n    }\n  }\n\n  //this whole method needs to be cleaned up a bit\n  handleZeroSquareClick = (coords) => {\n    let copyGrid = [...this.state.grid]\n    let visited = {}\n    visited[coords] = true\n    let queue = [coords]\n\n    while (queue.length > 0) {\n      let current = queue.pop()\n\n      if (copyGrid[current[0]][current[1]] === 0) {\n        copyGrid[current[0]][current[1]] = ' *'\n      }\n\n      //grab all possibile neighboring tiles\n      let poss = this.generatePossibilities(current[0], current[1])\n\n      // filter possibilities for numbe tile and reveal them\n      let bordering = poss.filter(n => copyGrid[n[0]][n[1]] !== 0)\n\n      bordering.forEach(ss => {\n        let currValue = copyGrid[ss[0]][ss[1]]\n        // * is revealed\n        copyGrid[ss[0]][ss[1]] = currValue + \"*\"\n      })\n\n      //filter for suitable 0/blank tiles and visit them on search\n      let neighbors = poss.filter(n => copyGrid[n[0]][n[1]] === 0)\n      for (let i = 0; i < neighbors.length; i++) {\n        if (!visited[neighbors[i]]) {\n          queue.push(neighbors[i])\n          visited[neighbors[i]] = true\n        }\n      }\n    }\n    this.setState({ grid: copyGrid })\n  }\n\n  //filter\n  winCheck = () => {\n    if (this.state.mines === 0) {\n      for (let i = 0; i < this.state.grid.length; i++) {\n        for (let j = 0; j < this.state.grid.length; j++) {\n          let currValue = this.state.grid[i][j] + ''\n          console.log(currValue)\n          if (!(currValue.includes('*') || currValue === 'bF')) {\n            return false\n          }\n        }\n      }\n      this.winGame();\n    }\n  }\n\n  winGame = () => {\n    this.setState({ active: false })\n    alert(\"YOU WIN\")\n  }\n\n  handleFlagClick = (e, coords) => {\n    if (this.state.active) {\n      let mines = this.state.mines\n      let copyGrid = [...this.state.grid];\n      let stringValue = copyGrid[coords[0]][coords[1]] + '';\n      //remove flag\n      if (stringValue.includes('F')) {\n        mines++;\n        copyGrid[coords[0]][coords[1]] = stringValue.slice(0, 1)\n        //adding flag\n      } else {\n        mines--;\n        copyGrid[coords[0]][coords[1]] += 'F'\n      }\n\n      this.setState({\n        grid: copyGrid,\n        mines\n      }, () => this.winCheck()\n      )\n    }\n  }\n\n  gameStarted = () => {\n    this.setState({ active: true })\n  }\n\n  restartGame = () => {\n    console.log(\"Game restart!!\")\n    let currDifficulty = this.state.difficulty\n    this.setState({ active: true }, () => {\n      this.determineBoard(currDifficulty)\n    })\n    //reset timer\n\n  }\n\n  render() {\n    //styling for table- needs to be moved to css\n    const style = {\n      textAlign: \"center\",\n      tableLayout: 'fixed',\n    }\n\n    //render the current board via passing in values from state grid to Square components and\n    //arranging them in a table\n    const gameGrid = this.state.grid.map((row, i) => {\n      return (\n        <tr key={\"row\" + i}>\n          {row.map((col, j) => {\n            let revealed = false;\n            let flagged = false;\n            let currentValue = this.state.grid[i][j].toString()\n            currentValue.includes('*') ? revealed = true : revealed = false\n            currentValue.includes('F') ? flagged = true : flagged = false\n            return (\n              <Square\n                key={i + \":\" + j}\n                revealed={revealed}\n                data={currentValue.charAt(0)}\n                flagged={flagged}\n                active={this.state.active}\n                coords={[i, j]}\n                handleSquareClick={this.handleSquareClick}\n                handleFlagClick={this.handleFlagClick} />\n            )\n          })}\n        </tr>\n      )\n    })\n\n    return (\n      <div>\n        <GameInfoBar\n          mines={this.state.mines}\n          active={this.state.active}\n          restart={this.restartGame} />\n        <table cellSpacing=\"0\" id=\"table\" style={style} onMouseEnter={this.gameStarted} >\n          <tbody>\n            {gameGrid}\n          </tbody>\n        </table>\n      </div>\n    )\n\n  }\n}\n\nexport default GameBoard;\n"]},"metadata":{},"sourceType":"module"}